/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.red.search.dejavu.relevance.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class GBDTRequest implements org.apache.thrift.TBase<GBDTRequest, GBDTRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GBDTRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GBDTRequest");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("request_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("terms", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UNTOKENIZED_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("untokenized_user_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MULTI_TAXONOMY1_FIELD_DESC = new org.apache.thrift.protocol.TField("multi_taxonomy1", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField MULTI_TAXONOMY2_FIELD_DESC = new org.apache.thrift.protocol.TField("multi_taxonomy2", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField AVG_DL_FIELD_DESC = new org.apache.thrift.protocol.TField("avg_dl", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField MODEL_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("model_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("debug", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GBDTRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GBDTRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String request_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String source; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Term> terms; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> ids; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String model; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String untokenized_user_name; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Double> multi_taxonomy1; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Double> multi_taxonomy2; // required
  public double avg_dl; // required
  public double model_threshold; // required
  public boolean debug; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "request_id"),
    SOURCE((short)2, "source"),
    TERMS((short)3, "terms"),
    IDS((short)4, "ids"),
    MODEL((short)5, "model"),
    UNTOKENIZED_USER_NAME((short)6, "untokenized_user_name"),
    MULTI_TAXONOMY1((short)7, "multi_taxonomy1"),
    MULTI_TAXONOMY2((short)8, "multi_taxonomy2"),
    AVG_DL((short)9, "avg_dl"),
    MODEL_THRESHOLD((short)10, "model_threshold"),
    DEBUG((short)11, "debug");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // SOURCE
          return SOURCE;
        case 3: // TERMS
          return TERMS;
        case 4: // IDS
          return IDS;
        case 5: // MODEL
          return MODEL;
        case 6: // UNTOKENIZED_USER_NAME
          return UNTOKENIZED_USER_NAME;
        case 7: // MULTI_TAXONOMY1
          return MULTI_TAXONOMY1;
        case 8: // MULTI_TAXONOMY2
          return MULTI_TAXONOMY2;
        case 9: // AVG_DL
          return AVG_DL;
        case 10: // MODEL_THRESHOLD
          return MODEL_THRESHOLD;
        case 11: // DEBUG
          return DEBUG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AVG_DL_ISSET_ID = 0;
  private static final int __MODEL_THRESHOLD_ISSET_ID = 1;
  private static final int __DEBUG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("request_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TERMS, new org.apache.thrift.meta_data.FieldMetaData("terms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Term.class))));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNTOKENIZED_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("untokenized_user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_TAXONOMY1, new org.apache.thrift.meta_data.FieldMetaData("multi_taxonomy1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.MULTI_TAXONOMY2, new org.apache.thrift.meta_data.FieldMetaData("multi_taxonomy2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.AVG_DL, new org.apache.thrift.meta_data.FieldMetaData("avg_dl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MODEL_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("model_threshold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEBUG, new org.apache.thrift.meta_data.FieldMetaData("debug", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GBDTRequest.class, metaDataMap);
  }

  public GBDTRequest() {
  }

  public GBDTRequest(
    java.lang.String request_id,
    java.lang.String source,
    java.util.List<Term> terms,
    java.util.List<java.lang.String> ids,
    java.lang.String model,
    java.lang.String untokenized_user_name,
    java.util.Map<java.lang.String,java.lang.Double> multi_taxonomy1,
    java.util.Map<java.lang.String,java.lang.Double> multi_taxonomy2,
    double avg_dl,
    double model_threshold,
    boolean debug)
  {
    this();
    this.request_id = request_id;
    this.source = source;
    this.terms = terms;
    this.ids = ids;
    this.model = model;
    this.untokenized_user_name = untokenized_user_name;
    this.multi_taxonomy1 = multi_taxonomy1;
    this.multi_taxonomy2 = multi_taxonomy2;
    this.avg_dl = avg_dl;
    setAvg_dlIsSet(true);
    this.model_threshold = model_threshold;
    setModel_thresholdIsSet(true);
    this.debug = debug;
    setDebugIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GBDTRequest(GBDTRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequest_id()) {
      this.request_id = other.request_id;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetTerms()) {
      java.util.List<Term> __this__terms = new java.util.ArrayList<Term>(other.terms.size());
      for (Term other_element : other.terms) {
        __this__terms.add(new Term(other_element));
      }
      this.terms = __this__terms;
    }
    if (other.isSetIds()) {
      java.util.List<java.lang.String> __this__ids = new java.util.ArrayList<java.lang.String>(other.ids);
      this.ids = __this__ids;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    if (other.isSetUntokenized_user_name()) {
      this.untokenized_user_name = other.untokenized_user_name;
    }
    if (other.isSetMulti_taxonomy1()) {
      java.util.Map<java.lang.String,java.lang.Double> __this__multi_taxonomy1 = new java.util.HashMap<java.lang.String,java.lang.Double>(other.multi_taxonomy1);
      this.multi_taxonomy1 = __this__multi_taxonomy1;
    }
    if (other.isSetMulti_taxonomy2()) {
      java.util.Map<java.lang.String,java.lang.Double> __this__multi_taxonomy2 = new java.util.HashMap<java.lang.String,java.lang.Double>(other.multi_taxonomy2);
      this.multi_taxonomy2 = __this__multi_taxonomy2;
    }
    this.avg_dl = other.avg_dl;
    this.model_threshold = other.model_threshold;
    this.debug = other.debug;
  }

  public GBDTRequest deepCopy() {
    return new GBDTRequest(this);
  }

  @Override
  public void clear() {
    this.request_id = null;
    this.source = null;
    this.terms = null;
    this.ids = null;
    this.model = null;
    this.untokenized_user_name = null;
    this.multi_taxonomy1 = null;
    this.multi_taxonomy2 = null;
    setAvg_dlIsSet(false);
    this.avg_dl = 0.0;
    setModel_thresholdIsSet(false);
    this.model_threshold = 0.0;
    setDebugIsSet(false);
    this.debug = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRequest_id() {
    return this.request_id;
  }

  public GBDTRequest setRequest_id(@org.apache.thrift.annotation.Nullable java.lang.String request_id) {
    this.request_id = request_id;
    return this;
  }

  public void unsetRequest_id() {
    this.request_id = null;
  }

  /** Returns true if field request_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_id() {
    return this.request_id != null;
  }

  public void setRequest_idIsSet(boolean value) {
    if (!value) {
      this.request_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSource() {
    return this.source;
  }

  public GBDTRequest setSource(@org.apache.thrift.annotation.Nullable java.lang.String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public int getTermsSize() {
    return (this.terms == null) ? 0 : this.terms.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Term> getTermsIterator() {
    return (this.terms == null) ? null : this.terms.iterator();
  }

  public void addToTerms(Term elem) {
    if (this.terms == null) {
      this.terms = new java.util.ArrayList<Term>();
    }
    this.terms.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Term> getTerms() {
    return this.terms;
  }

  public GBDTRequest setTerms(@org.apache.thrift.annotation.Nullable java.util.List<Term> terms) {
    this.terms = terms;
    return this;
  }

  public void unsetTerms() {
    this.terms = null;
  }

  /** Returns true if field terms is set (has been assigned a value) and false otherwise */
  public boolean isSetTerms() {
    return this.terms != null;
  }

  public void setTermsIsSet(boolean value) {
    if (!value) {
      this.terms = null;
    }
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getIdsIterator() {
    return (this.ids == null) ? null : this.ids.iterator();
  }

  public void addToIds(java.lang.String elem) {
    if (this.ids == null) {
      this.ids = new java.util.ArrayList<java.lang.String>();
    }
    this.ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getIds() {
    return this.ids;
  }

  public GBDTRequest setIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getModel() {
    return this.model;
  }

  public GBDTRequest setModel(@org.apache.thrift.annotation.Nullable java.lang.String model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUntokenized_user_name() {
    return this.untokenized_user_name;
  }

  public GBDTRequest setUntokenized_user_name(@org.apache.thrift.annotation.Nullable java.lang.String untokenized_user_name) {
    this.untokenized_user_name = untokenized_user_name;
    return this;
  }

  public void unsetUntokenized_user_name() {
    this.untokenized_user_name = null;
  }

  /** Returns true if field untokenized_user_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUntokenized_user_name() {
    return this.untokenized_user_name != null;
  }

  public void setUntokenized_user_nameIsSet(boolean value) {
    if (!value) {
      this.untokenized_user_name = null;
    }
  }

  public int getMulti_taxonomy1Size() {
    return (this.multi_taxonomy1 == null) ? 0 : this.multi_taxonomy1.size();
  }

  public void putToMulti_taxonomy1(java.lang.String key, double val) {
    if (this.multi_taxonomy1 == null) {
      this.multi_taxonomy1 = new java.util.HashMap<java.lang.String,java.lang.Double>();
    }
    this.multi_taxonomy1.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Double> getMulti_taxonomy1() {
    return this.multi_taxonomy1;
  }

  public GBDTRequest setMulti_taxonomy1(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Double> multi_taxonomy1) {
    this.multi_taxonomy1 = multi_taxonomy1;
    return this;
  }

  public void unsetMulti_taxonomy1() {
    this.multi_taxonomy1 = null;
  }

  /** Returns true if field multi_taxonomy1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMulti_taxonomy1() {
    return this.multi_taxonomy1 != null;
  }

  public void setMulti_taxonomy1IsSet(boolean value) {
    if (!value) {
      this.multi_taxonomy1 = null;
    }
  }

  public int getMulti_taxonomy2Size() {
    return (this.multi_taxonomy2 == null) ? 0 : this.multi_taxonomy2.size();
  }

  public void putToMulti_taxonomy2(java.lang.String key, double val) {
    if (this.multi_taxonomy2 == null) {
      this.multi_taxonomy2 = new java.util.HashMap<java.lang.String,java.lang.Double>();
    }
    this.multi_taxonomy2.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Double> getMulti_taxonomy2() {
    return this.multi_taxonomy2;
  }

  public GBDTRequest setMulti_taxonomy2(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Double> multi_taxonomy2) {
    this.multi_taxonomy2 = multi_taxonomy2;
    return this;
  }

  public void unsetMulti_taxonomy2() {
    this.multi_taxonomy2 = null;
  }

  /** Returns true if field multi_taxonomy2 is set (has been assigned a value) and false otherwise */
  public boolean isSetMulti_taxonomy2() {
    return this.multi_taxonomy2 != null;
  }

  public void setMulti_taxonomy2IsSet(boolean value) {
    if (!value) {
      this.multi_taxonomy2 = null;
    }
  }

  public double getAvg_dl() {
    return this.avg_dl;
  }

  public GBDTRequest setAvg_dl(double avg_dl) {
    this.avg_dl = avg_dl;
    setAvg_dlIsSet(true);
    return this;
  }

  public void unsetAvg_dl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVG_DL_ISSET_ID);
  }

  /** Returns true if field avg_dl is set (has been assigned a value) and false otherwise */
  public boolean isSetAvg_dl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVG_DL_ISSET_ID);
  }

  public void setAvg_dlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVG_DL_ISSET_ID, value);
  }

  public double getModel_threshold() {
    return this.model_threshold;
  }

  public GBDTRequest setModel_threshold(double model_threshold) {
    this.model_threshold = model_threshold;
    setModel_thresholdIsSet(true);
    return this;
  }

  public void unsetModel_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODEL_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field model_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetModel_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODEL_THRESHOLD_ISSET_ID);
  }

  public void setModel_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODEL_THRESHOLD_ISSET_ID, value);
  }

  public boolean isDebug() {
    return this.debug;
  }

  public GBDTRequest setDebug(boolean debug) {
    this.debug = debug;
    setDebugIsSet(true);
    return this;
  }

  public void unsetDebug() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEBUG_ISSET_ID);
  }

  /** Returns true if field debug is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEBUG_ISSET_ID);
  }

  public void setDebugIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEBUG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequest_id();
      } else {
        setRequest_id((java.lang.String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((java.lang.String)value);
      }
      break;

    case TERMS:
      if (value == null) {
        unsetTerms();
      } else {
        setTerms((java.util.List<Term>)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((java.util.List<java.lang.String>)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((java.lang.String)value);
      }
      break;

    case UNTOKENIZED_USER_NAME:
      if (value == null) {
        unsetUntokenized_user_name();
      } else {
        setUntokenized_user_name((java.lang.String)value);
      }
      break;

    case MULTI_TAXONOMY1:
      if (value == null) {
        unsetMulti_taxonomy1();
      } else {
        setMulti_taxonomy1((java.util.Map<java.lang.String,java.lang.Double>)value);
      }
      break;

    case MULTI_TAXONOMY2:
      if (value == null) {
        unsetMulti_taxonomy2();
      } else {
        setMulti_taxonomy2((java.util.Map<java.lang.String,java.lang.Double>)value);
      }
      break;

    case AVG_DL:
      if (value == null) {
        unsetAvg_dl();
      } else {
        setAvg_dl((java.lang.Double)value);
      }
      break;

    case MODEL_THRESHOLD:
      if (value == null) {
        unsetModel_threshold();
      } else {
        setModel_threshold((java.lang.Double)value);
      }
      break;

    case DEBUG:
      if (value == null) {
        unsetDebug();
      } else {
        setDebug((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return getRequest_id();

    case SOURCE:
      return getSource();

    case TERMS:
      return getTerms();

    case IDS:
      return getIds();

    case MODEL:
      return getModel();

    case UNTOKENIZED_USER_NAME:
      return getUntokenized_user_name();

    case MULTI_TAXONOMY1:
      return getMulti_taxonomy1();

    case MULTI_TAXONOMY2:
      return getMulti_taxonomy2();

    case AVG_DL:
      return getAvg_dl();

    case MODEL_THRESHOLD:
      return getModel_threshold();

    case DEBUG:
      return isDebug();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequest_id();
    case SOURCE:
      return isSetSource();
    case TERMS:
      return isSetTerms();
    case IDS:
      return isSetIds();
    case MODEL:
      return isSetModel();
    case UNTOKENIZED_USER_NAME:
      return isSetUntokenized_user_name();
    case MULTI_TAXONOMY1:
      return isSetMulti_taxonomy1();
    case MULTI_TAXONOMY2:
      return isSetMulti_taxonomy2();
    case AVG_DL:
      return isSetAvg_dl();
    case MODEL_THRESHOLD:
      return isSetModel_threshold();
    case DEBUG:
      return isSetDebug();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GBDTRequest)
      return this.equals((GBDTRequest)that);
    return false;
  }

  public boolean equals(GBDTRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_request_id = true && this.isSetRequest_id();
    boolean that_present_request_id = true && that.isSetRequest_id();
    if (this_present_request_id || that_present_request_id) {
      if (!(this_present_request_id && that_present_request_id))
        return false;
      if (!this.request_id.equals(that.request_id))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_terms = true && this.isSetTerms();
    boolean that_present_terms = true && that.isSetTerms();
    if (this_present_terms || that_present_terms) {
      if (!(this_present_terms && that_present_terms))
        return false;
      if (!this.terms.equals(that.terms))
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_untokenized_user_name = true && this.isSetUntokenized_user_name();
    boolean that_present_untokenized_user_name = true && that.isSetUntokenized_user_name();
    if (this_present_untokenized_user_name || that_present_untokenized_user_name) {
      if (!(this_present_untokenized_user_name && that_present_untokenized_user_name))
        return false;
      if (!this.untokenized_user_name.equals(that.untokenized_user_name))
        return false;
    }

    boolean this_present_multi_taxonomy1 = true && this.isSetMulti_taxonomy1();
    boolean that_present_multi_taxonomy1 = true && that.isSetMulti_taxonomy1();
    if (this_present_multi_taxonomy1 || that_present_multi_taxonomy1) {
      if (!(this_present_multi_taxonomy1 && that_present_multi_taxonomy1))
        return false;
      if (!this.multi_taxonomy1.equals(that.multi_taxonomy1))
        return false;
    }

    boolean this_present_multi_taxonomy2 = true && this.isSetMulti_taxonomy2();
    boolean that_present_multi_taxonomy2 = true && that.isSetMulti_taxonomy2();
    if (this_present_multi_taxonomy2 || that_present_multi_taxonomy2) {
      if (!(this_present_multi_taxonomy2 && that_present_multi_taxonomy2))
        return false;
      if (!this.multi_taxonomy2.equals(that.multi_taxonomy2))
        return false;
    }

    boolean this_present_avg_dl = true;
    boolean that_present_avg_dl = true;
    if (this_present_avg_dl || that_present_avg_dl) {
      if (!(this_present_avg_dl && that_present_avg_dl))
        return false;
      if (this.avg_dl != that.avg_dl)
        return false;
    }

    boolean this_present_model_threshold = true;
    boolean that_present_model_threshold = true;
    if (this_present_model_threshold || that_present_model_threshold) {
      if (!(this_present_model_threshold && that_present_model_threshold))
        return false;
      if (this.model_threshold != that.model_threshold)
        return false;
    }

    boolean this_present_debug = true;
    boolean that_present_debug = true;
    if (this_present_debug || that_present_debug) {
      if (!(this_present_debug && that_present_debug))
        return false;
      if (this.debug != that.debug)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRequest_id()) ? 131071 : 524287);
    if (isSetRequest_id())
      hashCode = hashCode * 8191 + request_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source.hashCode();

    hashCode = hashCode * 8191 + ((isSetTerms()) ? 131071 : 524287);
    if (isSetTerms())
      hashCode = hashCode * 8191 + terms.hashCode();

    hashCode = hashCode * 8191 + ((isSetIds()) ? 131071 : 524287);
    if (isSetIds())
      hashCode = hashCode * 8191 + ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetModel()) ? 131071 : 524287);
    if (isSetModel())
      hashCode = hashCode * 8191 + model.hashCode();

    hashCode = hashCode * 8191 + ((isSetUntokenized_user_name()) ? 131071 : 524287);
    if (isSetUntokenized_user_name())
      hashCode = hashCode * 8191 + untokenized_user_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetMulti_taxonomy1()) ? 131071 : 524287);
    if (isSetMulti_taxonomy1())
      hashCode = hashCode * 8191 + multi_taxonomy1.hashCode();

    hashCode = hashCode * 8191 + ((isSetMulti_taxonomy2()) ? 131071 : 524287);
    if (isSetMulti_taxonomy2())
      hashCode = hashCode * 8191 + multi_taxonomy2.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(avg_dl);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(model_threshold);

    hashCode = hashCode * 8191 + ((debug) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(GBDTRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRequest_id()).compareTo(other.isSetRequest_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_id, other.request_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTerms()).compareTo(other.isSetTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terms, other.terms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUntokenized_user_name()).compareTo(other.isSetUntokenized_user_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUntokenized_user_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.untokenized_user_name, other.untokenized_user_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMulti_taxonomy1()).compareTo(other.isSetMulti_taxonomy1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMulti_taxonomy1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multi_taxonomy1, other.multi_taxonomy1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMulti_taxonomy2()).compareTo(other.isSetMulti_taxonomy2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMulti_taxonomy2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multi_taxonomy2, other.multi_taxonomy2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAvg_dl()).compareTo(other.isSetAvg_dl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvg_dl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avg_dl, other.avg_dl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModel_threshold()).compareTo(other.isSetModel_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model_threshold, other.model_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDebug()).compareTo(other.isSetDebug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug, other.debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GBDTRequest(");
    boolean first = true;

    sb.append("request_id:");
    if (this.request_id == null) {
      sb.append("null");
    } else {
      sb.append(this.request_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("terms:");
    if (this.terms == null) {
      sb.append("null");
    } else {
      sb.append(this.terms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ids:");
    if (this.ids == null) {
      sb.append("null");
    } else {
      sb.append(this.ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("untokenized_user_name:");
    if (this.untokenized_user_name == null) {
      sb.append("null");
    } else {
      sb.append(this.untokenized_user_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multi_taxonomy1:");
    if (this.multi_taxonomy1 == null) {
      sb.append("null");
    } else {
      sb.append(this.multi_taxonomy1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multi_taxonomy2:");
    if (this.multi_taxonomy2 == null) {
      sb.append("null");
    } else {
      sb.append(this.multi_taxonomy2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avg_dl:");
    sb.append(this.avg_dl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("model_threshold:");
    sb.append(this.model_threshold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("debug:");
    sb.append(this.debug);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GBDTRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GBDTRequestStandardScheme getScheme() {
      return new GBDTRequestStandardScheme();
    }
  }

  private static class GBDTRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<GBDTRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GBDTRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.request_id = iprot.readString();
              struct.setRequest_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.terms = new java.util.ArrayList<Term>(_list0.size);
                @org.apache.thrift.annotation.Nullable Term _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Term();
                  _elem1.read(iprot);
                  struct.terms.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.ids = new java.util.ArrayList<java.lang.String>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.ids.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.model = iprot.readString();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNTOKENIZED_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.untokenized_user_name = iprot.readString();
              struct.setUntokenized_user_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MULTI_TAXONOMY1
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.multi_taxonomy1 = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map6.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key7;
                double _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  _val8 = iprot.readDouble();
                  struct.multi_taxonomy1.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setMulti_taxonomy1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MULTI_TAXONOMY2
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.multi_taxonomy2 = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map10.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key11;
                double _val12;
                for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                {
                  _key11 = iprot.readString();
                  _val12 = iprot.readDouble();
                  struct.multi_taxonomy2.put(_key11, _val12);
                }
                iprot.readMapEnd();
              }
              struct.setMulti_taxonomy2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AVG_DL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avg_dl = iprot.readDouble();
              struct.setAvg_dlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MODEL_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.model_threshold = iprot.readDouble();
              struct.setModel_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.debug = iprot.readBool();
              struct.setDebugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GBDTRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.request_id != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.request_id);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.terms != null) {
        oprot.writeFieldBegin(TERMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.terms.size()));
          for (Term _iter14 : struct.terms)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ids.size()));
          for (java.lang.String _iter15 : struct.ids)
          {
            oprot.writeString(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        oprot.writeString(struct.model);
        oprot.writeFieldEnd();
      }
      if (struct.untokenized_user_name != null) {
        oprot.writeFieldBegin(UNTOKENIZED_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.untokenized_user_name);
        oprot.writeFieldEnd();
      }
      if (struct.multi_taxonomy1 != null) {
        oprot.writeFieldBegin(MULTI_TAXONOMY1_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.multi_taxonomy1.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter16 : struct.multi_taxonomy1.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeDouble(_iter16.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.multi_taxonomy2 != null) {
        oprot.writeFieldBegin(MULTI_TAXONOMY2_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.multi_taxonomy2.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter17 : struct.multi_taxonomy2.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            oprot.writeDouble(_iter17.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AVG_DL_FIELD_DESC);
      oprot.writeDouble(struct.avg_dl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODEL_THRESHOLD_FIELD_DESC);
      oprot.writeDouble(struct.model_threshold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEBUG_FIELD_DESC);
      oprot.writeBool(struct.debug);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GBDTRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GBDTRequestTupleScheme getScheme() {
      return new GBDTRequestTupleScheme();
    }
  }

  private static class GBDTRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<GBDTRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GBDTRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRequest_id()) {
        optionals.set(0);
      }
      if (struct.isSetSource()) {
        optionals.set(1);
      }
      if (struct.isSetTerms()) {
        optionals.set(2);
      }
      if (struct.isSetIds()) {
        optionals.set(3);
      }
      if (struct.isSetModel()) {
        optionals.set(4);
      }
      if (struct.isSetUntokenized_user_name()) {
        optionals.set(5);
      }
      if (struct.isSetMulti_taxonomy1()) {
        optionals.set(6);
      }
      if (struct.isSetMulti_taxonomy2()) {
        optionals.set(7);
      }
      if (struct.isSetAvg_dl()) {
        optionals.set(8);
      }
      if (struct.isSetModel_threshold()) {
        optionals.set(9);
      }
      if (struct.isSetDebug()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetRequest_id()) {
        oprot.writeString(struct.request_id);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetTerms()) {
        {
          oprot.writeI32(struct.terms.size());
          for (Term _iter18 : struct.terms)
          {
            _iter18.write(oprot);
          }
        }
      }
      if (struct.isSetIds()) {
        {
          oprot.writeI32(struct.ids.size());
          for (java.lang.String _iter19 : struct.ids)
          {
            oprot.writeString(_iter19);
          }
        }
      }
      if (struct.isSetModel()) {
        oprot.writeString(struct.model);
      }
      if (struct.isSetUntokenized_user_name()) {
        oprot.writeString(struct.untokenized_user_name);
      }
      if (struct.isSetMulti_taxonomy1()) {
        {
          oprot.writeI32(struct.multi_taxonomy1.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter20 : struct.multi_taxonomy1.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeDouble(_iter20.getValue());
          }
        }
      }
      if (struct.isSetMulti_taxonomy2()) {
        {
          oprot.writeI32(struct.multi_taxonomy2.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter21 : struct.multi_taxonomy2.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            oprot.writeDouble(_iter21.getValue());
          }
        }
      }
      if (struct.isSetAvg_dl()) {
        oprot.writeDouble(struct.avg_dl);
      }
      if (struct.isSetModel_threshold()) {
        oprot.writeDouble(struct.model_threshold);
      }
      if (struct.isSetDebug()) {
        oprot.writeBool(struct.debug);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GBDTRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.request_id = iprot.readString();
        struct.setRequest_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list22 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.terms = new java.util.ArrayList<Term>(_list22.size);
          @org.apache.thrift.annotation.Nullable Term _elem23;
          for (int _i24 = 0; _i24 < _list22.size; ++_i24)
          {
            _elem23 = new Term();
            _elem23.read(iprot);
            struct.terms.add(_elem23);
          }
        }
        struct.setTermsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ids = new java.util.ArrayList<java.lang.String>(_list25.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = iprot.readString();
            struct.ids.add(_elem26);
          }
        }
        struct.setIdsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.model = iprot.readString();
        struct.setModelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.untokenized_user_name = iprot.readString();
        struct.setUntokenized_user_nameIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map28 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.multi_taxonomy1 = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map28.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key29;
          double _val30;
          for (int _i31 = 0; _i31 < _map28.size; ++_i31)
          {
            _key29 = iprot.readString();
            _val30 = iprot.readDouble();
            struct.multi_taxonomy1.put(_key29, _val30);
          }
        }
        struct.setMulti_taxonomy1IsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.multi_taxonomy2 = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map32.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key33;
          double _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = iprot.readString();
            _val34 = iprot.readDouble();
            struct.multi_taxonomy2.put(_key33, _val34);
          }
        }
        struct.setMulti_taxonomy2IsSet(true);
      }
      if (incoming.get(8)) {
        struct.avg_dl = iprot.readDouble();
        struct.setAvg_dlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.model_threshold = iprot.readDouble();
        struct.setModel_thresholdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.debug = iprot.readBool();
        struct.setDebugIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

