/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.red.search.compute.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ComputeResult implements org.apache.thrift.TBase<ComputeResult, ComputeResult._Fields>, java.io.Serializable, Cloneable, Comparable<ComputeResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComputeResult");

  private static final org.apache.thrift.protocol.TField SCORES_FIELD_DESC = new org.apache.thrift.protocol.TField("scores", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("error_info", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComputeResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComputeResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> scores; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String error_info; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCORES((short)1, "scores"),
    ERROR_INFO((short)2, "error_info");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCORES
          return SCORES;
        case 2: // ERROR_INFO
          return ERROR_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCORES, new org.apache.thrift.meta_data.FieldMetaData("scores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ERROR_INFO, new org.apache.thrift.meta_data.FieldMetaData("error_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComputeResult.class, metaDataMap);
  }

  public ComputeResult() {
  }

  public ComputeResult(
    java.util.List<java.lang.Double> scores,
    java.lang.String error_info)
  {
    this();
    this.scores = scores;
    this.error_info = error_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComputeResult(ComputeResult other) {
    if (other.isSetScores()) {
      java.util.List<java.lang.Double> __this__scores = new java.util.ArrayList<java.lang.Double>(other.scores);
      this.scores = __this__scores;
    }
    if (other.isSetError_info()) {
      this.error_info = other.error_info;
    }
  }

  public ComputeResult deepCopy() {
    return new ComputeResult(this);
  }

  @Override
  public void clear() {
    this.scores = null;
    this.error_info = null;
  }

  public int getScoresSize() {
    return (this.scores == null) ? 0 : this.scores.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getScoresIterator() {
    return (this.scores == null) ? null : this.scores.iterator();
  }

  public void addToScores(double elem) {
    if (this.scores == null) {
      this.scores = new java.util.ArrayList<java.lang.Double>();
    }
    this.scores.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getScores() {
    return this.scores;
  }

  public ComputeResult setScores(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> scores) {
    this.scores = scores;
    return this;
  }

  public void unsetScores() {
    this.scores = null;
  }

  /** Returns true if field scores is set (has been assigned a value) and false otherwise */
  public boolean isSetScores() {
    return this.scores != null;
  }

  public void setScoresIsSet(boolean value) {
    if (!value) {
      this.scores = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError_info() {
    return this.error_info;
  }

  public ComputeResult setError_info(@org.apache.thrift.annotation.Nullable java.lang.String error_info) {
    this.error_info = error_info;
    return this;
  }

  public void unsetError_info() {
    this.error_info = null;
  }

  /** Returns true if field error_info is set (has been assigned a value) and false otherwise */
  public boolean isSetError_info() {
    return this.error_info != null;
  }

  public void setError_infoIsSet(boolean value) {
    if (!value) {
      this.error_info = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SCORES:
      if (value == null) {
        unsetScores();
      } else {
        setScores((java.util.List<java.lang.Double>)value);
      }
      break;

    case ERROR_INFO:
      if (value == null) {
        unsetError_info();
      } else {
        setError_info((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCORES:
      return getScores();

    case ERROR_INFO:
      return getError_info();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCORES:
      return isSetScores();
    case ERROR_INFO:
      return isSetError_info();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ComputeResult)
      return this.equals((ComputeResult)that);
    return false;
  }

  public boolean equals(ComputeResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_scores = true && this.isSetScores();
    boolean that_present_scores = true && that.isSetScores();
    if (this_present_scores || that_present_scores) {
      if (!(this_present_scores && that_present_scores))
        return false;
      if (!this.scores.equals(that.scores))
        return false;
    }

    boolean this_present_error_info = true && this.isSetError_info();
    boolean that_present_error_info = true && that.isSetError_info();
    if (this_present_error_info || that_present_error_info) {
      if (!(this_present_error_info && that_present_error_info))
        return false;
      if (!this.error_info.equals(that.error_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetScores()) ? 131071 : 524287);
    if (isSetScores())
      hashCode = hashCode * 8191 + scores.hashCode();

    hashCode = hashCode * 8191 + ((isSetError_info()) ? 131071 : 524287);
    if (isSetError_info())
      hashCode = hashCode * 8191 + error_info.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ComputeResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetScores()).compareTo(other.isSetScores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scores, other.scores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetError_info()).compareTo(other.isSetError_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_info, other.error_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ComputeResult(");
    boolean first = true;

    sb.append("scores:");
    if (this.scores == null) {
      sb.append("null");
    } else {
      sb.append(this.scores);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("error_info:");
    if (this.error_info == null) {
      sb.append("null");
    } else {
      sb.append(this.error_info);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComputeResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ComputeResultStandardScheme getScheme() {
      return new ComputeResultStandardScheme();
    }
  }

  private static class ComputeResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComputeResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComputeResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCORES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.scores = new java.util.ArrayList<java.lang.Double>(_list16.size);
                double _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readDouble();
                  struct.scores.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setScoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error_info = iprot.readString();
              struct.setError_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComputeResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.scores != null) {
        oprot.writeFieldBegin(SCORES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.scores.size()));
          for (double _iter19 : struct.scores)
          {
            oprot.writeDouble(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.error_info != null) {
        oprot.writeFieldBegin(ERROR_INFO_FIELD_DESC);
        oprot.writeString(struct.error_info);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComputeResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ComputeResultTupleScheme getScheme() {
      return new ComputeResultTupleScheme();
    }
  }

  private static class ComputeResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComputeResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComputeResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetScores()) {
        optionals.set(0);
      }
      if (struct.isSetError_info()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetScores()) {
        {
          oprot.writeI32(struct.scores.size());
          for (double _iter20 : struct.scores)
          {
            oprot.writeDouble(_iter20);
          }
        }
      }
      if (struct.isSetError_info()) {
        oprot.writeString(struct.error_info);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComputeResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.scores = new java.util.ArrayList<java.lang.Double>(_list21.size);
          double _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readDouble();
            struct.scores.add(_elem22);
          }
        }
        struct.setScoresIsSet(true);
      }
      if (incoming.get(1)) {
        struct.error_info = iprot.readString();
        struct.setError_infoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

