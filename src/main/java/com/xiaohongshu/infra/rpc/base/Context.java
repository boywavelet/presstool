/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaohongshu.infra.rpc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * rpc context that contains:
 * 1: open tracing infomation
 * 2: userID for log coloring
 * 3: an expandable map for custom loads
 */
public class Context implements org.apache.thrift.TBase<Context, Context._Fields>, java.io.Serializable, Cloneable, Comparable<Context> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Context");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("clientHost", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BAGGAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("baggage", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SAMPLED_FIELD_DESC = new org.apache.thrift.protocol.TField("sampled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentSpanID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectID", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField APP_BUILD_FIELD_DESC = new org.apache.thrift.protocol.TField("appBuild", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField APP_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("appPlatform", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("userIP", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ContextStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ContextTupleSchemeFactory();

  /**
   * open tracing trace id
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String traceID; // required
  /**
   * the caller's host (IP or hostname)
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String clientHost; // required
  /**
   * open tracing baggae, can be used to carry custom loads
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> baggage; // required
  /**
   * open tracing span id
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String spanID; // required
  /**
   * whether the very request is sampled
   * 
   */
  public boolean sampled; // required
  /**
   * open tracing parent span ID
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String parentSpanID; // required
  /**
   * userID for log coloring
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String userID; // required
  /**
   * appID for multi-app
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String appID; // required
  /**
   * projectID for multi-app
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String projectID; // required
  /**
   * app build number
   * 
   */
  public int appBuild; // required
  /**
   * app platform
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String appPlatform; // required
  /**
   * user ip address
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String userIP; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * open tracing trace id
     * 
     */
    TRACE_ID((short)1, "traceID"),
    /**
     * the caller's host (IP or hostname)
     * 
     */
    CLIENT_HOST((short)2, "clientHost"),
    /**
     * open tracing baggae, can be used to carry custom loads
     * 
     */
    BAGGAGE((short)3, "baggage"),
    /**
     * open tracing span id
     * 
     */
    SPAN_ID((short)4, "spanID"),
    /**
     * whether the very request is sampled
     * 
     */
    SAMPLED((short)5, "sampled"),
    /**
     * open tracing parent span ID
     * 
     */
    PARENT_SPAN_ID((short)6, "parentSpanID"),
    /**
     * userID for log coloring
     * 
     */
    USER_ID((short)7, "userID"),
    /**
     * appID for multi-app
     * 
     */
    APP_ID((short)8, "appID"),
    /**
     * projectID for multi-app
     * 
     */
    PROJECT_ID((short)9, "projectID"),
    /**
     * app build number
     * 
     */
    APP_BUILD((short)10, "appBuild"),
    /**
     * app platform
     * 
     */
    APP_PLATFORM((short)11, "appPlatform"),
    /**
     * user ip address
     * 
     */
    USER_IP((short)12, "userIP");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // CLIENT_HOST
          return CLIENT_HOST;
        case 3: // BAGGAGE
          return BAGGAGE;
        case 4: // SPAN_ID
          return SPAN_ID;
        case 5: // SAMPLED
          return SAMPLED;
        case 6: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 7: // USER_ID
          return USER_ID;
        case 8: // APP_ID
          return APP_ID;
        case 9: // PROJECT_ID
          return PROJECT_ID;
        case 10: // APP_BUILD
          return APP_BUILD;
        case 11: // APP_PLATFORM
          return APP_PLATFORM;
        case 12: // USER_IP
          return USER_IP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SAMPLED_ISSET_ID = 0;
  private static final int __APPBUILD_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_HOST, new org.apache.thrift.meta_data.FieldMetaData("clientHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAGGAGE, new org.apache.thrift.meta_data.FieldMetaData("baggage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLED, new org.apache.thrift.meta_data.FieldMetaData("sampled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parentSpanID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_BUILD, new org.apache.thrift.meta_data.FieldMetaData("appBuild", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("appPlatform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("userIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Context.class, metaDataMap);
  }

  public Context() {
  }

  public Context(
    java.lang.String traceID,
    java.lang.String clientHost,
    java.util.Map<java.lang.String,java.lang.String> baggage,
    java.lang.String spanID,
    boolean sampled,
    java.lang.String parentSpanID,
    java.lang.String userID,
    java.lang.String appID,
    java.lang.String projectID,
    int appBuild,
    java.lang.String appPlatform,
    java.lang.String userIP)
  {
    this();
    this.traceID = traceID;
    this.clientHost = clientHost;
    this.baggage = baggage;
    this.spanID = spanID;
    this.sampled = sampled;
    setSampledIsSet(true);
    this.parentSpanID = parentSpanID;
    this.userID = userID;
    this.appID = appID;
    this.projectID = projectID;
    this.appBuild = appBuild;
    setAppBuildIsSet(true);
    this.appPlatform = appPlatform;
    this.userIP = userIP;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Context(Context other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTraceID()) {
      this.traceID = other.traceID;
    }
    if (other.isSetClientHost()) {
      this.clientHost = other.clientHost;
    }
    if (other.isSetBaggage()) {
      java.util.Map<java.lang.String,java.lang.String> __this__baggage = new java.util.HashMap<java.lang.String,java.lang.String>(other.baggage);
      this.baggage = __this__baggage;
    }
    if (other.isSetSpanID()) {
      this.spanID = other.spanID;
    }
    this.sampled = other.sampled;
    if (other.isSetParentSpanID()) {
      this.parentSpanID = other.parentSpanID;
    }
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetAppID()) {
      this.appID = other.appID;
    }
    if (other.isSetProjectID()) {
      this.projectID = other.projectID;
    }
    this.appBuild = other.appBuild;
    if (other.isSetAppPlatform()) {
      this.appPlatform = other.appPlatform;
    }
    if (other.isSetUserIP()) {
      this.userIP = other.userIP;
    }
  }

  public Context deepCopy() {
    return new Context(this);
  }

  @Override
  public void clear() {
    this.traceID = null;
    this.clientHost = null;
    this.baggage = null;
    this.spanID = null;
    setSampledIsSet(false);
    this.sampled = false;
    this.parentSpanID = null;
    this.userID = null;
    this.appID = null;
    this.projectID = null;
    setAppBuildIsSet(false);
    this.appBuild = 0;
    this.appPlatform = null;
    this.userIP = null;
  }

  /**
   * open tracing trace id
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTraceID() {
    return this.traceID;
  }

  /**
   * open tracing trace id
   * 
   */
  public Context setTraceID(@org.apache.thrift.annotation.Nullable java.lang.String traceID) {
    this.traceID = traceID;
    return this;
  }

  public void unsetTraceID() {
    this.traceID = null;
  }

  /** Returns true if field traceID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceID() {
    return this.traceID != null;
  }

  public void setTraceIDIsSet(boolean value) {
    if (!value) {
      this.traceID = null;
    }
  }

  /**
   * the caller's host (IP or hostname)
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClientHost() {
    return this.clientHost;
  }

  /**
   * the caller's host (IP or hostname)
   * 
   */
  public Context setClientHost(@org.apache.thrift.annotation.Nullable java.lang.String clientHost) {
    this.clientHost = clientHost;
    return this;
  }

  public void unsetClientHost() {
    this.clientHost = null;
  }

  /** Returns true if field clientHost is set (has been assigned a value) and false otherwise */
  public boolean isSetClientHost() {
    return this.clientHost != null;
  }

  public void setClientHostIsSet(boolean value) {
    if (!value) {
      this.clientHost = null;
    }
  }

  public int getBaggageSize() {
    return (this.baggage == null) ? 0 : this.baggage.size();
  }

  public void putToBaggage(java.lang.String key, java.lang.String val) {
    if (this.baggage == null) {
      this.baggage = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.baggage.put(key, val);
  }

  /**
   * open tracing baggae, can be used to carry custom loads
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getBaggage() {
    return this.baggage;
  }

  /**
   * open tracing baggae, can be used to carry custom loads
   * 
   */
  public Context setBaggage(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> baggage) {
    this.baggage = baggage;
    return this;
  }

  public void unsetBaggage() {
    this.baggage = null;
  }

  /** Returns true if field baggage is set (has been assigned a value) and false otherwise */
  public boolean isSetBaggage() {
    return this.baggage != null;
  }

  public void setBaggageIsSet(boolean value) {
    if (!value) {
      this.baggage = null;
    }
  }

  /**
   * open tracing span id
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSpanID() {
    return this.spanID;
  }

  /**
   * open tracing span id
   * 
   */
  public Context setSpanID(@org.apache.thrift.annotation.Nullable java.lang.String spanID) {
    this.spanID = spanID;
    return this;
  }

  public void unsetSpanID() {
    this.spanID = null;
  }

  /** Returns true if field spanID is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanID() {
    return this.spanID != null;
  }

  public void setSpanIDIsSet(boolean value) {
    if (!value) {
      this.spanID = null;
    }
  }

  /**
   * whether the very request is sampled
   * 
   */
  public boolean isSampled() {
    return this.sampled;
  }

  /**
   * whether the very request is sampled
   * 
   */
  public Context setSampled(boolean sampled) {
    this.sampled = sampled;
    setSampledIsSet(true);
    return this;
  }

  public void unsetSampled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLED_ISSET_ID);
  }

  /** Returns true if field sampled is set (has been assigned a value) and false otherwise */
  public boolean isSetSampled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLED_ISSET_ID);
  }

  public void setSampledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLED_ISSET_ID, value);
  }

  /**
   * open tracing parent span ID
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParentSpanID() {
    return this.parentSpanID;
  }

  /**
   * open tracing parent span ID
   * 
   */
  public Context setParentSpanID(@org.apache.thrift.annotation.Nullable java.lang.String parentSpanID) {
    this.parentSpanID = parentSpanID;
    return this;
  }

  public void unsetParentSpanID() {
    this.parentSpanID = null;
  }

  /** Returns true if field parentSpanID is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSpanID() {
    return this.parentSpanID != null;
  }

  public void setParentSpanIDIsSet(boolean value) {
    if (!value) {
      this.parentSpanID = null;
    }
  }

  /**
   * userID for log coloring
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserID() {
    return this.userID;
  }

  /**
   * userID for log coloring
   * 
   */
  public Context setUserID(@org.apache.thrift.annotation.Nullable java.lang.String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  /**
   * appID for multi-app
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAppID() {
    return this.appID;
  }

  /**
   * appID for multi-app
   * 
   */
  public Context setAppID(@org.apache.thrift.annotation.Nullable java.lang.String appID) {
    this.appID = appID;
    return this;
  }

  public void unsetAppID() {
    this.appID = null;
  }

  /** Returns true if field appID is set (has been assigned a value) and false otherwise */
  public boolean isSetAppID() {
    return this.appID != null;
  }

  public void setAppIDIsSet(boolean value) {
    if (!value) {
      this.appID = null;
    }
  }

  /**
   * projectID for multi-app
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProjectID() {
    return this.projectID;
  }

  /**
   * projectID for multi-app
   * 
   */
  public Context setProjectID(@org.apache.thrift.annotation.Nullable java.lang.String projectID) {
    this.projectID = projectID;
    return this;
  }

  public void unsetProjectID() {
    this.projectID = null;
  }

  /** Returns true if field projectID is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectID() {
    return this.projectID != null;
  }

  public void setProjectIDIsSet(boolean value) {
    if (!value) {
      this.projectID = null;
    }
  }

  /**
   * app build number
   * 
   */
  public int getAppBuild() {
    return this.appBuild;
  }

  /**
   * app build number
   * 
   */
  public Context setAppBuild(int appBuild) {
    this.appBuild = appBuild;
    setAppBuildIsSet(true);
    return this;
  }

  public void unsetAppBuild() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPBUILD_ISSET_ID);
  }

  /** Returns true if field appBuild is set (has been assigned a value) and false otherwise */
  public boolean isSetAppBuild() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPBUILD_ISSET_ID);
  }

  public void setAppBuildIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPBUILD_ISSET_ID, value);
  }

  /**
   * app platform
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAppPlatform() {
    return this.appPlatform;
  }

  /**
   * app platform
   * 
   */
  public Context setAppPlatform(@org.apache.thrift.annotation.Nullable java.lang.String appPlatform) {
    this.appPlatform = appPlatform;
    return this;
  }

  public void unsetAppPlatform() {
    this.appPlatform = null;
  }

  /** Returns true if field appPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetAppPlatform() {
    return this.appPlatform != null;
  }

  public void setAppPlatformIsSet(boolean value) {
    if (!value) {
      this.appPlatform = null;
    }
  }

  /**
   * user ip address
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserIP() {
    return this.userIP;
  }

  /**
   * user ip address
   * 
   */
  public Context setUserIP(@org.apache.thrift.annotation.Nullable java.lang.String userIP) {
    this.userIP = userIP;
    return this;
  }

  public void unsetUserIP() {
    this.userIP = null;
  }

  /** Returns true if field userIP is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIP() {
    return this.userIP != null;
  }

  public void setUserIPIsSet(boolean value) {
    if (!value) {
      this.userIP = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceID();
      } else {
        setTraceID((java.lang.String)value);
      }
      break;

    case CLIENT_HOST:
      if (value == null) {
        unsetClientHost();
      } else {
        setClientHost((java.lang.String)value);
      }
      break;

    case BAGGAGE:
      if (value == null) {
        unsetBaggage();
      } else {
        setBaggage((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanID();
      } else {
        setSpanID((java.lang.String)value);
      }
      break;

    case SAMPLED:
      if (value == null) {
        unsetSampled();
      } else {
        setSampled((java.lang.Boolean)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParentSpanID();
      } else {
        setParentSpanID((java.lang.String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((java.lang.String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppID();
      } else {
        setAppID((java.lang.String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectID();
      } else {
        setProjectID((java.lang.String)value);
      }
      break;

    case APP_BUILD:
      if (value == null) {
        unsetAppBuild();
      } else {
        setAppBuild((java.lang.Integer)value);
      }
      break;

    case APP_PLATFORM:
      if (value == null) {
        unsetAppPlatform();
      } else {
        setAppPlatform((java.lang.String)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUserIP();
      } else {
        setUserIP((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTraceID();

    case CLIENT_HOST:
      return getClientHost();

    case BAGGAGE:
      return getBaggage();

    case SPAN_ID:
      return getSpanID();

    case SAMPLED:
      return isSampled();

    case PARENT_SPAN_ID:
      return getParentSpanID();

    case USER_ID:
      return getUserID();

    case APP_ID:
      return getAppID();

    case PROJECT_ID:
      return getProjectID();

    case APP_BUILD:
      return getAppBuild();

    case APP_PLATFORM:
      return getAppPlatform();

    case USER_IP:
      return getUserIP();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceID();
    case CLIENT_HOST:
      return isSetClientHost();
    case BAGGAGE:
      return isSetBaggage();
    case SPAN_ID:
      return isSetSpanID();
    case SAMPLED:
      return isSetSampled();
    case PARENT_SPAN_ID:
      return isSetParentSpanID();
    case USER_ID:
      return isSetUserID();
    case APP_ID:
      return isSetAppID();
    case PROJECT_ID:
      return isSetProjectID();
    case APP_BUILD:
      return isSetAppBuild();
    case APP_PLATFORM:
      return isSetAppPlatform();
    case USER_IP:
      return isSetUserIP();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Context)
      return this.equals((Context)that);
    return false;
  }

  public boolean equals(Context that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_traceID = true && this.isSetTraceID();
    boolean that_present_traceID = true && that.isSetTraceID();
    if (this_present_traceID || that_present_traceID) {
      if (!(this_present_traceID && that_present_traceID))
        return false;
      if (!this.traceID.equals(that.traceID))
        return false;
    }

    boolean this_present_clientHost = true && this.isSetClientHost();
    boolean that_present_clientHost = true && that.isSetClientHost();
    if (this_present_clientHost || that_present_clientHost) {
      if (!(this_present_clientHost && that_present_clientHost))
        return false;
      if (!this.clientHost.equals(that.clientHost))
        return false;
    }

    boolean this_present_baggage = true && this.isSetBaggage();
    boolean that_present_baggage = true && that.isSetBaggage();
    if (this_present_baggage || that_present_baggage) {
      if (!(this_present_baggage && that_present_baggage))
        return false;
      if (!this.baggage.equals(that.baggage))
        return false;
    }

    boolean this_present_spanID = true && this.isSetSpanID();
    boolean that_present_spanID = true && that.isSetSpanID();
    if (this_present_spanID || that_present_spanID) {
      if (!(this_present_spanID && that_present_spanID))
        return false;
      if (!this.spanID.equals(that.spanID))
        return false;
    }

    boolean this_present_sampled = true;
    boolean that_present_sampled = true;
    if (this_present_sampled || that_present_sampled) {
      if (!(this_present_sampled && that_present_sampled))
        return false;
      if (this.sampled != that.sampled)
        return false;
    }

    boolean this_present_parentSpanID = true && this.isSetParentSpanID();
    boolean that_present_parentSpanID = true && that.isSetParentSpanID();
    if (this_present_parentSpanID || that_present_parentSpanID) {
      if (!(this_present_parentSpanID && that_present_parentSpanID))
        return false;
      if (!this.parentSpanID.equals(that.parentSpanID))
        return false;
    }

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_appID = true && this.isSetAppID();
    boolean that_present_appID = true && that.isSetAppID();
    if (this_present_appID || that_present_appID) {
      if (!(this_present_appID && that_present_appID))
        return false;
      if (!this.appID.equals(that.appID))
        return false;
    }

    boolean this_present_projectID = true && this.isSetProjectID();
    boolean that_present_projectID = true && that.isSetProjectID();
    if (this_present_projectID || that_present_projectID) {
      if (!(this_present_projectID && that_present_projectID))
        return false;
      if (!this.projectID.equals(that.projectID))
        return false;
    }

    boolean this_present_appBuild = true;
    boolean that_present_appBuild = true;
    if (this_present_appBuild || that_present_appBuild) {
      if (!(this_present_appBuild && that_present_appBuild))
        return false;
      if (this.appBuild != that.appBuild)
        return false;
    }

    boolean this_present_appPlatform = true && this.isSetAppPlatform();
    boolean that_present_appPlatform = true && that.isSetAppPlatform();
    if (this_present_appPlatform || that_present_appPlatform) {
      if (!(this_present_appPlatform && that_present_appPlatform))
        return false;
      if (!this.appPlatform.equals(that.appPlatform))
        return false;
    }

    boolean this_present_userIP = true && this.isSetUserIP();
    boolean that_present_userIP = true && that.isSetUserIP();
    if (this_present_userIP || that_present_userIP) {
      if (!(this_present_userIP && that_present_userIP))
        return false;
      if (!this.userIP.equals(that.userIP))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTraceID()) ? 131071 : 524287);
    if (isSetTraceID())
      hashCode = hashCode * 8191 + traceID.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientHost()) ? 131071 : 524287);
    if (isSetClientHost())
      hashCode = hashCode * 8191 + clientHost.hashCode();

    hashCode = hashCode * 8191 + ((isSetBaggage()) ? 131071 : 524287);
    if (isSetBaggage())
      hashCode = hashCode * 8191 + baggage.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpanID()) ? 131071 : 524287);
    if (isSetSpanID())
      hashCode = hashCode * 8191 + spanID.hashCode();

    hashCode = hashCode * 8191 + ((sampled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetParentSpanID()) ? 131071 : 524287);
    if (isSetParentSpanID())
      hashCode = hashCode * 8191 + parentSpanID.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserID()) ? 131071 : 524287);
    if (isSetUserID())
      hashCode = hashCode * 8191 + userID.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppID()) ? 131071 : 524287);
    if (isSetAppID())
      hashCode = hashCode * 8191 + appID.hashCode();

    hashCode = hashCode * 8191 + ((isSetProjectID()) ? 131071 : 524287);
    if (isSetProjectID())
      hashCode = hashCode * 8191 + projectID.hashCode();

    hashCode = hashCode * 8191 + appBuild;

    hashCode = hashCode * 8191 + ((isSetAppPlatform()) ? 131071 : 524287);
    if (isSetAppPlatform())
      hashCode = hashCode * 8191 + appPlatform.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserIP()) ? 131071 : 524287);
    if (isSetUserIP())
      hashCode = hashCode * 8191 + userIP.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Context other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTraceID()).compareTo(other.isSetTraceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceID, other.traceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientHost()).compareTo(other.isSetClientHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientHost, other.clientHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaggage()).compareTo(other.isSetBaggage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaggage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baggage, other.baggage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpanID()).compareTo(other.isSetSpanID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanID, other.spanID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSampled()).compareTo(other.isSetSampled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampled, other.sampled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentSpanID()).compareTo(other.isSetParentSpanID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSpanID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentSpanID, other.parentSpanID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppID()).compareTo(other.isSetAppID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appID, other.appID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectID()).compareTo(other.isSetProjectID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectID, other.projectID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppBuild()).compareTo(other.isSetAppBuild());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppBuild()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appBuild, other.appBuild);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppPlatform()).compareTo(other.isSetAppPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appPlatform, other.appPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserIP()).compareTo(other.isSetUserIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIP, other.userIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Context(");
    boolean first = true;

    sb.append("traceID:");
    if (this.traceID == null) {
      sb.append("null");
    } else {
      sb.append(this.traceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientHost:");
    if (this.clientHost == null) {
      sb.append("null");
    } else {
      sb.append(this.clientHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("baggage:");
    if (this.baggage == null) {
      sb.append("null");
    } else {
      sb.append(this.baggage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanID:");
    if (this.spanID == null) {
      sb.append("null");
    } else {
      sb.append(this.spanID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sampled:");
    sb.append(this.sampled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentSpanID:");
    if (this.parentSpanID == null) {
      sb.append("null");
    } else {
      sb.append(this.parentSpanID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appID:");
    if (this.appID == null) {
      sb.append("null");
    } else {
      sb.append(this.appID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectID:");
    if (this.projectID == null) {
      sb.append("null");
    } else {
      sb.append(this.projectID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appBuild:");
    sb.append(this.appBuild);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appPlatform:");
    if (this.appPlatform == null) {
      sb.append("null");
    } else {
      sb.append(this.appPlatform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIP:");
    if (this.userIP == null) {
      sb.append("null");
    } else {
      sb.append(this.userIP);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContextStandardScheme getScheme() {
      return new ContextStandardScheme();
    }
  }

  private static class ContextStandardScheme extends org.apache.thrift.scheme.StandardScheme<Context> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Context struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceID = iprot.readString();
              struct.setTraceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientHost = iprot.readString();
              struct.setClientHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BAGGAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.baggage = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.baggage.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setBaggageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanID = iprot.readString();
              struct.setSpanIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SAMPLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sampled = iprot.readBool();
              struct.setSampledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentSpanID = iprot.readString();
              struct.setParentSpanIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appID = iprot.readString();
              struct.setAppIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectID = iprot.readString();
              struct.setProjectIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APP_BUILD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appBuild = iprot.readI32();
              struct.setAppBuildIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // APP_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appPlatform = iprot.readString();
              struct.setAppPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userIP = iprot.readString();
              struct.setUserIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Context struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.traceID != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceID);
        oprot.writeFieldEnd();
      }
      if (struct.clientHost != null) {
        oprot.writeFieldBegin(CLIENT_HOST_FIELD_DESC);
        oprot.writeString(struct.clientHost);
        oprot.writeFieldEnd();
      }
      if (struct.baggage != null) {
        oprot.writeFieldBegin(BAGGAGE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.baggage.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.baggage.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.spanID != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.spanID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SAMPLED_FIELD_DESC);
      oprot.writeBool(struct.sampled);
      oprot.writeFieldEnd();
      if (struct.parentSpanID != null) {
        oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.parentSpanID);
        oprot.writeFieldEnd();
      }
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.appID != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appID);
        oprot.writeFieldEnd();
      }
      if (struct.projectID != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APP_BUILD_FIELD_DESC);
      oprot.writeI32(struct.appBuild);
      oprot.writeFieldEnd();
      if (struct.appPlatform != null) {
        oprot.writeFieldBegin(APP_PLATFORM_FIELD_DESC);
        oprot.writeString(struct.appPlatform);
        oprot.writeFieldEnd();
      }
      if (struct.userIP != null) {
        oprot.writeFieldBegin(USER_IP_FIELD_DESC);
        oprot.writeString(struct.userIP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContextTupleScheme getScheme() {
      return new ContextTupleScheme();
    }
  }

  private static class ContextTupleScheme extends org.apache.thrift.scheme.TupleScheme<Context> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Context struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTraceID()) {
        optionals.set(0);
      }
      if (struct.isSetClientHost()) {
        optionals.set(1);
      }
      if (struct.isSetBaggage()) {
        optionals.set(2);
      }
      if (struct.isSetSpanID()) {
        optionals.set(3);
      }
      if (struct.isSetSampled()) {
        optionals.set(4);
      }
      if (struct.isSetParentSpanID()) {
        optionals.set(5);
      }
      if (struct.isSetUserID()) {
        optionals.set(6);
      }
      if (struct.isSetAppID()) {
        optionals.set(7);
      }
      if (struct.isSetProjectID()) {
        optionals.set(8);
      }
      if (struct.isSetAppBuild()) {
        optionals.set(9);
      }
      if (struct.isSetAppPlatform()) {
        optionals.set(10);
      }
      if (struct.isSetUserIP()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTraceID()) {
        oprot.writeString(struct.traceID);
      }
      if (struct.isSetClientHost()) {
        oprot.writeString(struct.clientHost);
      }
      if (struct.isSetBaggage()) {
        {
          oprot.writeI32(struct.baggage.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.baggage.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetSpanID()) {
        oprot.writeString(struct.spanID);
      }
      if (struct.isSetSampled()) {
        oprot.writeBool(struct.sampled);
      }
      if (struct.isSetParentSpanID()) {
        oprot.writeString(struct.parentSpanID);
      }
      if (struct.isSetUserID()) {
        oprot.writeString(struct.userID);
      }
      if (struct.isSetAppID()) {
        oprot.writeString(struct.appID);
      }
      if (struct.isSetProjectID()) {
        oprot.writeString(struct.projectID);
      }
      if (struct.isSetAppBuild()) {
        oprot.writeI32(struct.appBuild);
      }
      if (struct.isSetAppPlatform()) {
        oprot.writeString(struct.appPlatform);
      }
      if (struct.isSetUserIP()) {
        oprot.writeString(struct.userIP);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Context struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.traceID = iprot.readString();
        struct.setTraceIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientHost = iprot.readString();
        struct.setClientHostIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.baggage = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key7;
          @org.apache.thrift.annotation.Nullable java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.baggage.put(_key7, _val8);
          }
        }
        struct.setBaggageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.spanID = iprot.readString();
        struct.setSpanIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sampled = iprot.readBool();
        struct.setSampledIsSet(true);
      }
      if (incoming.get(5)) {
        struct.parentSpanID = iprot.readString();
        struct.setParentSpanIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userID = iprot.readString();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.appID = iprot.readString();
        struct.setAppIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.projectID = iprot.readString();
        struct.setProjectIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.appBuild = iprot.readI32();
        struct.setAppBuildIsSet(true);
      }
      if (incoming.get(10)) {
        struct.appPlatform = iprot.readString();
        struct.setAppPlatformIsSet(true);
      }
      if (incoming.get(11)) {
        struct.userIP = iprot.readString();
        struct.setUserIPIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

